Grammar

  Number, Line, Rule
    1  80 filter_list -> filter
    2  81 filter_list -> filter_list filter
    3  84 filter -> filter_open filter_op filter_list filter_close
    4 102 filter -> filter_open expression filter_close
    5 111 filter_open -> L_PAREN
    6 114 filter_close -> R_PAREN
    7 117 filter_op -> OP_AND
    8 118 filter_op -> OP_OR
    9 119 filter_op -> OP_NOT
   10 124 expression -> OPERAND OP_PRESENT
   11 133 expression -> OPERAND exp_operator VAL_INT
   12 143 expression -> OPERAND exp_operator VAL_BOOL
   13 153 expression -> OPERAND exp_operator OPERAND
   14 164 exp_operator -> OP_EQU
   15 165 exp_operator -> OP_GT
   16 166 exp_operator -> OP_LT
   17 167 exp_operator -> OP_APPROX


Terminals, with rules where they appear

$ (-1)
error (256)
L_PAREN (257) 5
R_PAREN (258) 6
OP_AND (259) 7
OP_OR (260) 8
OP_NOT (261) 9
OP_EQU (262) 14
OP_GT (263) 15
OP_LT (264) 16
OP_PRESENT (265) 10
OP_APPROX (266) 17
VAL_INT (267) 11
VAL_BOOL (268) 12
OPERAND (269) 10 11 12 13


Nonterminals, with rules where they appear

filter_list (16)
    on left: 1 2, on right: 2 3
filter (17)
    on left: 3 4, on right: 1 2
filter_open (18)
    on left: 5, on right: 3 4
filter_close (19)
    on left: 6, on right: 3 4
filter_op (20)
    on left: 7 8 9, on right: 3
expression (21)
    on left: 10 11 12 13, on right: 4
exp_operator (22)
    on left: 14 15 16 17, on right: 11 12 13


state 0

    L_PAREN	shift, and go to state 1

    filter_list	go to state 2
    filter	go to state 3
    filter_open	go to state 4



state 1

    filter_open  ->  L_PAREN .   (rule 5)

    $default	reduce using rule 5 (filter_open)



state 2

    filter_list  ->  filter_list . filter   (rule 2)

    $   	go to state 25
    L_PAREN	shift, and go to state 1

    filter	go to state 5
    filter_open	go to state 4



state 3

    filter_list  ->  filter .   (rule 1)

    $default	reduce using rule 1 (filter_list)



state 4

    filter  ->  filter_open . filter_op filter_list filter_close   (rule 3)
    filter  ->  filter_open . expression filter_close   (rule 4)

    OP_AND	shift, and go to state 6
    OP_OR	shift, and go to state 7
    OP_NOT	shift, and go to state 8
    OPERAND	shift, and go to state 9

    filter_op	go to state 10
    expression	go to state 11



state 5

    filter_list  ->  filter_list filter .   (rule 2)

    $default	reduce using rule 2 (filter_list)



state 6

    filter_op  ->  OP_AND .   (rule 7)

    $default	reduce using rule 7 (filter_op)



state 7

    filter_op  ->  OP_OR .   (rule 8)

    $default	reduce using rule 8 (filter_op)



state 8

    filter_op  ->  OP_NOT .   (rule 9)

    $default	reduce using rule 9 (filter_op)



state 9

    expression  ->  OPERAND . OP_PRESENT   (rule 10)
    expression  ->  OPERAND . exp_operator VAL_INT   (rule 11)
    expression  ->  OPERAND . exp_operator VAL_BOOL   (rule 12)
    expression  ->  OPERAND . exp_operator OPERAND   (rule 13)

    OP_EQU	shift, and go to state 12
    OP_GT	shift, and go to state 13
    OP_LT	shift, and go to state 14
    OP_PRESENT	shift, and go to state 15
    OP_APPROX	shift, and go to state 16

    exp_operator	go to state 17



state 10

    filter  ->  filter_open filter_op . filter_list filter_close   (rule 3)

    L_PAREN	shift, and go to state 1

    filter_list	go to state 18
    filter	go to state 3
    filter_open	go to state 4



state 11

    filter  ->  filter_open expression . filter_close   (rule 4)

    R_PAREN	shift, and go to state 19

    filter_close	go to state 20



state 12

    exp_operator  ->  OP_EQU .   (rule 14)

    $default	reduce using rule 14 (exp_operator)



state 13

    exp_operator  ->  OP_GT .   (rule 15)

    $default	reduce using rule 15 (exp_operator)



state 14

    exp_operator  ->  OP_LT .   (rule 16)

    $default	reduce using rule 16 (exp_operator)



state 15

    expression  ->  OPERAND OP_PRESENT .   (rule 10)

    $default	reduce using rule 10 (expression)



state 16

    exp_operator  ->  OP_APPROX .   (rule 17)

    $default	reduce using rule 17 (exp_operator)



state 17

    expression  ->  OPERAND exp_operator . VAL_INT   (rule 11)
    expression  ->  OPERAND exp_operator . VAL_BOOL   (rule 12)
    expression  ->  OPERAND exp_operator . OPERAND   (rule 13)

    VAL_INT	shift, and go to state 21
    VAL_BOOL	shift, and go to state 22
    OPERAND	shift, and go to state 23



state 18

    filter_list  ->  filter_list . filter   (rule 2)
    filter  ->  filter_open filter_op filter_list . filter_close   (rule 3)

    L_PAREN	shift, and go to state 1
    R_PAREN	shift, and go to state 19

    filter	go to state 5
    filter_open	go to state 4
    filter_close	go to state 24



state 19

    filter_close  ->  R_PAREN .   (rule 6)

    $default	reduce using rule 6 (filter_close)



state 20

    filter  ->  filter_open expression filter_close .   (rule 4)

    $default	reduce using rule 4 (filter)



state 21

    expression  ->  OPERAND exp_operator VAL_INT .   (rule 11)

    $default	reduce using rule 11 (expression)



state 22

    expression  ->  OPERAND exp_operator VAL_BOOL .   (rule 12)

    $default	reduce using rule 12 (expression)



state 23

    expression  ->  OPERAND exp_operator OPERAND .   (rule 13)

    $default	reduce using rule 13 (expression)



state 24

    filter  ->  filter_open filter_op filter_list filter_close .   (rule 3)

    $default	reduce using rule 3 (filter)



state 25

    $   	go to state 26



state 26

    $default	accept


